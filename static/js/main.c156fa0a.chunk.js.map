{"version":3,"sources":["serviceWorker.ts","actions/todos.ts","selectors/todos.ts","components/TodoList.tsx","pages/HomePage.tsx","reducers/todos.ts","reducers/index.ts","store/index.ts","components/TodoForm.tsx","pages/AddPage.tsx","pages/EditPage.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ActionTypes","getTodos","createSelector","state","todos","s","getTodoById","id","find","item","addTodo","todo","type","ADD_TODO","payload","updateTodo","UPDATE_TODO","removeTodo","REMOVE_TODO","toggleTodo","TOGGLE_TODO","TodoList","due_date","undefined","moment","isSameOrBefore","_this","this","_this$props","props","react_default","a","createElement","row","gutter","justify","length","map","col","key","xs","sm","md","lg","style","padding","card","backgroundColor","isAfterDueDate","bordered","actions","es_switch","checked","completed","onChange","react_router_dom","title","to","concat","icon","popconfirm","onConfirm","okText","cancelText","className","theme","Meta_default","typography","Text","name","float","format","description","span","Title","level","textAlign","Component","withRouter","connect","dispatch","bindActionCreators","AddLink","styledComponents","Link","_templateObject","HomePage","render","react","es_button","shape","size","components_TodoList","React","initialState","fromTodos","reducer","combineReducers","arguments","action","nextId","Math","max","apply","Object","objectSpread","toConsumableArray","filter","persistedState","storedData","localStorage","getItem","JSON","parse","store","createStore","applyMiddleware","logger","subscribe","setItem","stringify","getState","validationSchema","Yup","min","required","TodoForm","formItemLayout","labelCol","wrapperCol","formik_esm","initialValues","onSubmit","submitHandler","formikBag","display","es_form","assign","width","_ref","field","form","Item","label","input","placeholder","touched","errors","_ref2","TextArea","rows","_ref3","date_picker","defaultValue","values","e","setFieldValue","_ref4","defaultChecked","value","onClick","submitForm","disabled","isSubmitting","loading","ReturnLink","AddPage_templateObject","AddPage","history","push","setSubmitting","components_TodoForm","EditPage_templateObject","EditPage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","EditPage_ReturnLink","getById","parseInt","params","TopBarTitle","App_templateObject","App","es","layout","height","Header","Content","background","minHeight","react_router","path","exact","component","Footer","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c156fa0a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import Todo from \"../models/Todo\";\r\n\r\nexport enum ActionTypes {\r\n  ADD_TODO = \"@todos/ADD_TODO\",\r\n  UPDATE_TODO = \"@todos/UPDATE_TODO\",\r\n  REMOVE_TODO = \"@todos/REMOVE_TODO\",\r\n  TOGGLE_TODO = \"@todos/TOGGLE_TODO\"\r\n}\r\n\r\nexport interface AddTodoAction {\r\n  type: ActionTypes.ADD_TODO;\r\n  payload: { todo: Todo };\r\n}\r\n\r\nexport interface UpdateTodoAction {\r\n  type: ActionTypes.UPDATE_TODO;\r\n  payload: { todo: Todo };\r\n}\r\n\r\nexport interface ToggleTodoAction {\r\n  type: ActionTypes.TOGGLE_TODO;\r\n  payload: { id: number };\r\n}\r\n\r\nexport interface RemoveTodoAction {\r\n  type: ActionTypes.REMOVE_TODO;\r\n  payload: { id: number };\r\n}\r\n\r\nexport const addTodo = (\r\n  todo: Todo\r\n): AddTodoAction => {\r\n  return {\r\n    type: ActionTypes.ADD_TODO,\r\n    payload: { todo }\r\n  };\r\n};\r\n\r\n\r\nexport const updateTodo = (todo: Todo): UpdateTodoAction => {\r\n  return { type: ActionTypes.UPDATE_TODO, payload: { todo }};\r\n};\r\n\r\n\r\nexport const removeTodo = (id: number): RemoveTodoAction => {\r\n  return { type: ActionTypes.REMOVE_TODO, payload: { id } };\r\n};\r\n\r\nexport const toggleTodo = (id: number): ToggleTodoAction => {\r\n  return { type: ActionTypes.TOGGLE_TODO, payload: { id } };\r\n};\r\n\r\nexport type Action = AddTodoAction | ToggleTodoAction | UpdateTodoAction | RemoveTodoAction;\r\n","import { State } from \"../reducers/\";\r\nimport { createSelector } from \"reselect\";\r\nimport Todo from \"../models/Todo\";\r\n\r\nconst getById = (state: State, id: number) => {\r\n  return state.todos.todos.find((item: Todo) => {\r\n    return item.id === id;\r\n  });\r\n};\r\nconst getTodosState = (state: State) => state.todos;\r\n\r\nexport const getTodos = createSelector(\r\n  [getTodosState],\r\n  s => s.todos\r\n);\r\n\r\nexport const getTodoById = createSelector(\r\n  [getById],\r\n  s => s\r\n);\r\n","import React, { Component } from \"react\";\r\nimport { Dispatch, bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { getTodos } from \"../selectors/todos\";\r\nimport { State } from \"../reducers\";\r\nimport Todo from \"../models/Todo\";\r\nimport { toggleTodo, removeTodo } from \"../actions/todos\";\r\nimport { Row, Col, Card, Icon, Switch, Popconfirm, Typography } from \"antd\";\r\nimport { withRouter, RouteComponentProps } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Meta from \"antd/lib/card/Meta\";\r\nimport moment from \"moment\";\r\n\r\ninterface OwnProps extends RouteComponentProps<{}> {\r\n  toggleTodo: (id: number) => void;\r\n  removeTodo: (id: number) => void;\r\n  todos: Todo[];\r\n}\r\nclass TodoList extends Component<OwnProps> {\r\n  isAfterDueDate(due_date: Date | undefined): boolean {\r\n    return due_date !== undefined && moment(due_date).isSameOrBefore(moment());\r\n  }\r\n\r\n  render() {\r\n    const { todos, removeTodo, toggleTodo } = this.props;\r\n    return (\r\n      <div>\r\n        <Row gutter={16} type=\"flex\" justify=\"center\">\r\n          {todos.length > 0 &&\r\n            todos.map(todo => (\r\n              <Col\r\n                key={todo.id}\r\n                xs={24}\r\n                sm={12}\r\n                md={12}\r\n                lg={8}\r\n                style={{ padding: \"1rem\" }}\r\n              >\r\n                <Card\r\n                  style={{\r\n                    backgroundColor: this.isAfterDueDate(todo.due_date)\r\n                      ? \"#F4846C\"\r\n                      : \"\"\r\n                  }}\r\n                  bordered={true}\r\n                  actions={[\r\n                    <Switch\r\n                      checked={todo.completed}\r\n                      onChange={() => {\r\n                        toggleTodo(todo.id);\r\n                      }}\r\n                    />,\r\n                    <Link title=\"Edit\" to={`/edit-todo/${todo.id}`}>\r\n                      <Icon type=\"edit\" />\r\n                    </Link>,\r\n                    <Popconfirm\r\n                      title=\"Are you sure delete this task?\"\r\n                      onConfirm={() => removeTodo(todo.id)}\r\n                      okText=\"Yes\"\r\n                      cancelText=\"No\"\r\n                    >\r\n                      <Icon\r\n                        title=\"Delete\"\r\n                        type=\"delete\"\r\n                        className=\"ant-typography-danger\"\r\n                        theme=\"filled\"\r\n                      />\r\n                    </Popconfirm>\r\n                  ]}\r\n                >\r\n                  <Meta\r\n                    title={\r\n                      <div>\r\n                        <Typography.Text>{todo.name}</Typography.Text>\r\n                        {todo.due_date && (\r\n                          <Typography.Text\r\n                            type=\"secondary\"\r\n                            style={{ float: \"right\" }}\r\n                          >\r\n                            {moment(todo.due_date).format(\"YYYY-MM-DD\")}\r\n                          </Typography.Text>\r\n                        )}\r\n                      </div>\r\n                    }\r\n                    description={todo.description}\r\n                  />\r\n                </Card>\r\n              </Col>\r\n            ))}\r\n          {!todos.length && (\r\n            <Col span={24}>\r\n              <Typography.Title level={4} style={{ textAlign: \"center\" }}>\r\n                You don't have any task. Click <Link to=\"/add-todo\">here</Link>{\" \"}\r\n                to add a task.\r\n              </Typography.Title>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state: State) => ({\r\n  todos: getTodos(state)\r\n});\r\nconst mapDispatchToProps = (dispatch: Dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      toggleTodo,\r\n      removeTodo\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default withRouter(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(TodoList)\r\n);\r\n","import { Button } from \"antd\";\r\nimport * as React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport styledComponents from 'styled-components';\r\nimport TodoList from \"../components/TodoList\";\r\n\r\nconst AddLink = styledComponents(Link)`\r\nposition: relative;\r\nbottom: 3.5rem;\r\nfloat: right;\r\n`;\r\nclass HomePage extends React.Component {\r\n  public render = () => {\r\n    return (\r\n        <div>\r\n          <AddLink to=\"add-todo\">\r\n            <Button type=\"primary\" shape=\"circle\" icon=\"plus\" size=\"large\" />\r\n          </AddLink>\r\n          <TodoList />\r\n        </div>\r\n    );\r\n  };\r\n}\r\nexport default HomePage;\r\n","import Todo from \"../models/Todo\";\r\nimport { ActionTypes } from \"../actions/todos\";\r\nimport { AnyAction } from \"redux\";\r\n\r\nexport interface State {\r\n  todos: Todo[];\r\n}\r\n\r\nexport const initialState: State = {\r\n  todos: []\r\n};\r\n\r\nexport function reducer(state: State = initialState, action: AnyAction) {\r\n  switch (action.type) {\r\n    case ActionTypes.ADD_TODO: {\r\n      let nextId = !state.todos.length\r\n        ? 1\r\n        : Math.max.apply(Math, state.todos.map((todo: Todo) => todo.id)) + 1;\r\n      return {\r\n        ...state,\r\n        todos: [...state.todos, { ...action.payload.todo, id: nextId }]\r\n      };\r\n    }\r\n    case ActionTypes.TOGGLE_TODO: {\r\n      return {\r\n        ...state,\r\n        todos: state.todos.map(todo => {\r\n          if (todo.id === action.payload.id) {\r\n            let data = { ...todo, completed: !todo.completed };\r\n            return data;\r\n          } else {\r\n            return todo;\r\n          }\r\n        })\r\n      };\r\n    }\r\n    case ActionTypes.UPDATE_TODO:\r\n      return {\r\n        ...state,\r\n        todos: state.todos.map(todo =>\r\n          todo.id === action.payload.todo.id ? action.payload.todo : todo\r\n        )\r\n      };\r\n    case ActionTypes.REMOVE_TODO:\r\n      return {\r\n        ...state,\r\n        todos: [...state.todos.filter(todo => action.payload.id !== todo.id)]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport * as fromTodos from './todos';\r\n\r\nexport interface State {\r\n    todos: fromTodos.State\r\n}\r\n\r\nexport const initialState: State = {\r\n    todos: fromTodos.initialState\r\n}\r\n\r\nexport const reducer = combineReducers<State>({\r\n    todos: fromTodos.reducer\r\n})","import logger from \"redux-logger\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport { reducer, initialState } from \"../reducers\";\r\n\r\nlet persistedState = initialState;\r\nlet storedData = localStorage.getItem(\"app\");\r\n\r\nif (typeof storedData === \"string\") {\r\n  persistedState.todos = JSON.parse(storedData).todos;\r\n}\r\n\r\nconst store = createStore(reducer, persistedState, applyMiddleware(logger));\r\n\r\nstore.subscribe(() => {\r\n  localStorage.setItem(\"app\", JSON.stringify(store.getState()));\r\n});\r\n\r\nexport default store;","import * as React from \"react\";\r\nimport { Form, Input, Button, DatePicker, Switch } from \"antd\";\r\nimport { Field, FieldProps, FormikProps, FormikActions, Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Todo from \"../models/Todo\";\r\nimport moment from \"moment\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    .min(2, \"Too Short!\")\r\n    .max(50, \"Too Long!\")\r\n    .required(\"Required\"),\r\n  description: Yup.string(),\r\n  due_date: Yup.date(),\r\n  completed: Yup.boolean()\r\n});\r\n\r\ninterface FormProps {\r\n  submitHandler: (values: Todo, actions: FormikActions<Todo>) => void;\r\n  initialValues: Todo;\r\n}\r\ntype Props = FormProps;\r\n\r\nconst TodoForm: React.SFC<Props> = props => {\r\n  const formItemLayout = {\r\n    labelCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 8 }\r\n    },\r\n    wrapperCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 16 }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Formik\r\n        initialValues={props.initialValues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={props.submitHandler}\r\n        render={(formikBag: FormikProps<Todo>) => (\r\n          <div style={{ display: \"flex\" }}>\r\n            <Form {...formItemLayout} style={{ width: \"100%\" }}>\r\n              <Field\r\n                name=\"name\"\r\n                render={({ field, form }: FieldProps<Todo>) => (\r\n                  <Form.Item label=\"Task name\" required>\r\n                    <Input type=\"text\" {...field} placeholder=\"Task Name\" />\r\n                    {form.touched.name && form.errors.name && form.errors.name}\r\n                  </Form.Item>\r\n                )}\r\n              />\r\n              <Field\r\n                name=\"description\"\r\n                render={({ field, form }: FieldProps<Todo>) => (\r\n                  <Form.Item label=\"Description\">\r\n                    <Input.TextArea\r\n                      rows={4}\r\n                      {...field}\r\n                      placeholder=\"Task description\"\r\n                    />\r\n                    {form.touched.description && form.errors.description && form.errors.description}\r\n                  </Form.Item>\r\n                )}\r\n              />\r\n              <Field\r\n                name=\"due_date\"\r\n                render={({ field, form }: FieldProps<Todo>) => (\r\n                  <Form.Item label=\"Due Date\">\r\n                    <DatePicker\r\n                      defaultValue={moment(formikBag.values.due_date)}\r\n                      onChange={e => formikBag.setFieldValue(field.name, e ? e : null)}\r\n                    />\r\n                    {form.touched.due_date && form.errors.due_date && form.errors.due_date}\r\n                  </Form.Item>\r\n                )}\r\n              />\r\n              <Field\r\n                name=\"completed\"\r\n                render={({ field, form }: FieldProps<Todo>) => (\r\n                  <Form.Item label=\"Completed\">\r\n                    <Switch\r\n                      defaultChecked={field.value}\r\n                      onChange={checked =>\r\n                        formikBag.setFieldValue(field.name, checked)\r\n                      }\r\n                    />\r\n                  </Form.Item>\r\n                )}\r\n              />\r\n              <Button\r\n                icon=\"save\"\r\n                type=\"primary\"\r\n                size=\"large\"\r\n                style={{ float: \"right\" }}\r\n                onClick={formikBag.submitForm}\r\n                disabled={formikBag.isSubmitting}\r\n                loading={formikBag.isSubmitting}\r\n              >\r\n                Save\r\n              </Button>\r\n            </Form>\r\n          </div>\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import * as React from \"react\";\r\nimport { Link, withRouter, RouteComponentProps } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch, bindActionCreators } from \"redux\";\r\nimport { addTodo } from \"../actions/todos\";\r\nimport TodoForm from \"../components/TodoForm\";\r\nimport styledComponents from \"styled-components\";\r\nimport { Button } from \"antd\";\r\nimport { FormikActions } from \"formik\";\r\nimport Todo from \"../models/Todo\";\r\n\r\nconst ReturnLink = styledComponents(Link)`\r\nposition: relative;\r\nbottom: 3.5rem;\r\nfloat: right;\r\n`;\r\n\r\ninterface OwnProps extends RouteComponentProps<{}> {\r\n  addTodo: (todo: Todo) => void;\r\n}\r\n\r\nclass AddPage extends React.Component<OwnProps> {\r\n  submitHandler = (values: Todo, actions: FormikActions<Todo>) => {\r\n    this.props.addTodo(values);\r\n    this.props.history.push(\"/\");\r\n    actions.setSubmitting(false);\r\n  };\r\n\r\n  initialValues: Todo = { id: 0, name: \"\", completed: false };\r\n\r\n  componentDidMount() {}\r\n\r\n  public render = () => {\r\n    return (\r\n      <div>\r\n        <ReturnLink to=\"/\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon=\"arrow-left\"\r\n            size=\"large\"\r\n          />\r\n        </ReturnLink>\r\n        <TodoForm\r\n          submitHandler={this.submitHandler}\r\n          initialValues={this.initialValues}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      addTodo\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default withRouter(\r\n  connect(\r\n    null,\r\n    mapDispatchToProps\r\n  )(AddPage)\r\n);\r\n","import React from \"react\";\r\nimport { Link, withRouter, RouteComponentProps } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch, bindActionCreators } from \"redux\";\r\nimport { updateTodo } from \"../actions/todos\";\r\nimport TodoForm from \"../components/TodoForm\";\r\nimport styledComponents from \"styled-components\";\r\nimport { Button } from \"antd\";\r\nimport { FormikActions } from \"formik\";\r\nimport Todo from \"../models/Todo\";\r\nimport { getTodoById } from \"../selectors/todos\";\r\nimport { State } from \"../reducers\";\r\n\r\nconst ReturnLink = styledComponents(Link)`\r\nposition: relative;\r\nbottom: 3.5rem;\r\nfloat: right;\r\n`;\r\n\r\ninterface OwnProps extends RouteComponentProps<{id:string}> {\r\n  updateTodo: (todo: Todo) => void;\r\n  getById: (id:number) => Todo | undefined;\r\n}\r\n\r\nclass EditPage extends React.Component<OwnProps> {\r\n  submitHandler = (values: Todo, actions: FormikActions<Todo>) => {\r\n    this.props.updateTodo(values);\r\n    this.props.history.push(\"/\");\r\n    actions.setSubmitting(false);\r\n  };\r\n  initialValues : Todo | undefined;\r\n\r\n  constructor(props:OwnProps) {\r\n    super(props);\r\n    this.initialValues = props.getById(parseInt(props.match.params.id));\r\n    if (!this.initialValues)\r\n      props.history.push(\"/\");\r\n    }\r\n\r\n  public render = () => {\r\n    return (\r\n      <div>\r\n        <ReturnLink to=\"/\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon=\"arrow-left\"\r\n            size=\"large\"\r\n          />\r\n        </ReturnLink>\r\n        <TodoForm\r\n          submitHandler={this.submitHandler}\r\n          initialValues={this.initialValues as Todo}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  getById: (id: number) => getTodoById(state, id)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      updateTodo\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default withRouter(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(EditPage)\r\n);\r\n","import React from \"react\";\r\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { Layout } from \"antd\";\r\nimport Title from \"antd/lib/typography/Title\";\r\nimport styledComponents from \"styled-components\";\r\n\r\nimport HomePage from \"./pages/HomePage\";\r\nimport store from \"./store\";\r\nimport AddPage from \"./pages/AddPage\";\r\nimport EditPage from \"./pages/EditPage\";\r\n\r\nconst TopBarTitle = styledComponents(Title)`\r\n  color: #FFFFFF !important;\r\n`;\r\n\r\nconst App = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <HashRouter>\r\n        <Layout style={{ height: \"100vh\" }}>\r\n          <Layout.Header>\r\n            <TopBarTitle>Task list</TopBarTitle>\r\n          </Layout.Header>\r\n          <Layout.Content style={{ padding: \"16px 50px\" }}>\r\n            <div style={{ background: \"#fff\", padding: 24, minHeight: 280 }}>\r\n              <Switch>\r\n                <Route path=\"/\" exact component={HomePage} />\r\n                <Route path=\"/add-todo\" component={AddPage} />\r\n                <Route path=\"/edit-todo/:id\" component={EditPage} />\r\n              </Switch>\r\n            </div>\r\n          </Layout.Content>\r\n          <Layout.Footer>\r\n            \r\n          </Layout.Footer>\r\n        </Layout>\r\n      </HashRouter>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}